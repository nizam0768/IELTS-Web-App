@page "/vocabulary"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using IELTS.EntityModels.Models
@using IELTS.EntityModels
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject IDbContextFactory<IELTS.EntityModels.IELTSStoreDbContext> DbFactory
<div class="container">
    <div class="row justify-content-md-center">
        <div class="col-md-auto d-flex justify-content-center align-items-center">
            @if (wordMeanings is null)
            {
                <p><em>Loading...</em></p>
            }
            else if (wordMeanings.Count == 0)
            {
                <p><em>No words found.</em></p>
            }
            else
            {
                var word = wordMeanings[index];
                <div class="card border-success mb-3" style="width: 32rem; height: 17rem" tabindex="0" @onkeydown="HandleKeyDown">
                    @if (!showDefinition)
                    {
                        <div class="card-body">
                            <div class="row">
                                <div class="col form-check">
                                    <input class="form-check-input" type="checkbox" value="" id="checkDefault" data-toggle="tooltip" data-placement="top" title="My Favorite" @bind="isFavorite" @bind:event="onchange" disabled="@isFavoriteProcessing" />
                                </div>
                                <div class="col text-end">
                                    <label class="@wordLabelCss">@wordLabel</label>
                                </div>
                            </div>
                            <div class="text-center">
                                <h5 class="card-title">@(word.Word ?? "NA")</h5>
                                <p>(@(word.PartofSpeech ?? "NA"))</p>
                                <p>@(word.Pronunciation ?? "NA")</p>
                            </div>
                        </div>
                        <div class="card-footer border-success text-center" style="background-color:#dcdcdc">
                            <button style="display:inline" @onclick="ToggleCard" type="button">Press to see meaning <i class="fas fa-arrow-circle-right" style="font-size: 2rem;"></i></button>
@*                             <input @onkeydown="HandleKeyDown" placeholder="Press â†’ key" />
 *@                        </div>
                    }
                    else
                    {
                        <div class="card-body">
                            <div>
                                <p class="card-title" style="color:red; display:inline">Definition:</p>
                                <p class="card-text" style="display:inline; font-size: 13px;">@(word.Definition ?? "NA")</p>
                            </div>
                            <div>
                                <p class="card-text" style="color:red; display:inline">Usage:</p>
                                <p class="card-text" style="display:inline; font-size: 13px;">@(word.Usage ?? "NA")</p>
                            </div>
                            <div>
                                <p class="card-text" style="color:red; display:inline">Related Words:</p>
                                <p class="card-text" style="display:inline; font-size: 13px;">@(word.RelatedWords ?? "NA")</p>
                            </div>
                            <div>
                                <p class="card-text" style="color:red; display:inline">More Info:</p>
                                <p class="card-text" style="display:inline; font-size: 13px;">@(word.MoreInfo ?? "NA")</p>
                            </div>
                        </div>
                        <div class="card-footer border-success text-center" style="background-color: #dcdcdc">
                            <div class="row row-cols-4">
                                <div class="col">
                                    <button @onclick="PrevWord" type="button"><i class="fas fa-chevron-left" style="font-size: 2rem;"></i>Prev</button>
                                </div>
                                <div class="col-6">
                                    <button @onclick="ToggleCard" type="button"><i class="fas fa-arrow-circle-left" style="font-size: 2rem;"></i>&nbsp Press to see word</button>
                                </div>
                                <div class="col">
                                    <button @onclick="NextWord" type="button">Next<i class="fas fa-chevron-right" style="font-size: 2rem;"></i></button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="col-lg-3">
            <button class="btn btn-outline-danger" @onclick="ReplayWord">I don't this word</button><br /><br />
            <button class="btn btn-outline-success" @onclick="NextWord">I know this word</button>
        </div>
    </div>
</div>

@code {
    private bool showDefinition = false;
    private IELTSStoreDbContext context = default!;
    private List<WordMeaning>? wordMeanings;
    private MyFavoriteWords? myFavoriteWords = new MyFavoriteWords();
    private int currentIndex = 0;
    private Queue<int> replayIndex = new Queue<int>();
    private int displayCountCheckForReplay = 0, queueCount =0, replayCounter = 0;
    private int index = 0;
    private string wordLabel = "New Word";
    private string wordLabelCss = "word-label";
    private bool flag = false;
    private bool isFavoriteProcessing = false;
    private bool _isFavorite;
    private bool isFavorite
    {
        get => _isFavorite;
        set => UpdateFavorite(value);
    }
    private void ToggleCard()
    {
        showDefinition = !showDefinition;
    }
    private async Task NextWord()
    {

        showDefinition = false;
        if (wordMeanings is not null && wordMeanings.Count > 0)
        {
            if(displayCountCheckForReplay != 2)
            {
                if (currentIndex == wordMeanings.Count-1)
                {
                    flag = true;
                    replayCounter++;
                }
                currentIndex = (currentIndex + 1) % wordMeanings.Count;
                index = currentIndex;
                wordLabel = !flag ? "New Word" : "Replay Word";
                wordLabelCss = !flag ? "word-label" : "word-label-replay";
                if(replayCounter > 3)
                {
                    wordLabel = "Word Masterd";
                    wordLabelCss = "word-label-success";
                }
                if (replayIndex.Count > 0)
                {
                    displayCountCheckForReplay++;
                }
            }
            else
            {
                index = replayIndex.Peek();
                wordLabel = "Queue Word";
                wordLabelCss = "word-label-queue"; 
                queueCount++;
                if(queueCount == 2)
                {
                    replayIndex.Dequeue();
                    wordLabel = "Word Masterd";
                    wordLabelCss = "word-label-success";
                    queueCount = 0;
                }
                displayCountCheckForReplay = 0;
            }
            isFavorite = await CheckIsFavoriteAsync();
        }
    }
    private async Task PrevWord()
    {
        showDefinition = false;
        if (wordMeanings is not null && currentIndex > 0 && wordMeanings.Count > 0)
        {
            currentIndex = (currentIndex - 1 + wordMeanings.Count) % wordMeanings.Count;
            index = currentIndex;
            isFavorite = await CheckIsFavoriteAsync();
        }
        wordLabel = "Replay Word";
        wordLabelCss = "word-label-replay";
    }
    private void ReplayWord()
    {
        replayIndex.Enqueue(currentIndex);
    }
    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "ArrowRight" || e.Key == "Enter")
        {
            NextWord();
        }
        else if (e.Key == "ArrowLeft")
        {
            PrevWord();
        }
        else if (e.Key == "ArrowUp" || e.Key == "ArrowDown")
        {
            ToggleCard();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
        wordMeanings = await context.WordMeanings.ToListAsync();
        if (wordMeanings is null || wordMeanings.Count == 0)
        {
            NavigationManager.NavigateTo("notfound");
        }
        _isFavorite = await CheckIsFavoriteAsync();
    }
    private async Task<bool> CheckIsFavoriteAsync()
    {
        await using var checkIsFavoriteContext = DbFactory.CreateDbContext();
        var word = wordMeanings.ElementAtOrDefault(index);
        if (word == null) return false;

        return await checkIsFavoriteContext.MyFavoriteWords.AnyAsync(f => f.WordId == word.Id);
    }
    private async void UpdateFavorite(bool value)
    {
        if (isFavoriteProcessing) return;

        try
        {
            isFavoriteProcessing = true;
            _isFavorite = value;
            await MyFavoriteWord(value);
        }
        finally
        {
            isFavoriteProcessing = false;
            StateHasChanged(); // refresh UI
        }
    }
    private async Task MyFavoriteWord(bool isFavorite)
    {
        await using var localContext = DbFactory.CreateDbContext();
        var word = wordMeanings[index];
        if (word == null) return;

        var existingFavoriteWord = await localContext.MyFavoriteWords
            .FirstOrDefaultAsync(m => m.WordId == word.Id);

        if (isFavorite && existingFavoriteWord == null)
        {
            var newFavorite = new MyFavoriteWords { WordId = word.Id };
            localContext.MyFavoriteWords.Add(newFavorite);
            await localContext.SaveChangesAsync();
            await ShowPopUpAsync("Word is added to favorite");
        }
        else if (!isFavorite && existingFavoriteWord != null)
        {
            localContext.MyFavoriteWords.Remove(existingFavoriteWord);
            await localContext.SaveChangesAsync();
            await ShowPopUpAsync("Word is removed from my favorite");
        }
    }
    private async Task ShowPopUpAsync(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }
}
