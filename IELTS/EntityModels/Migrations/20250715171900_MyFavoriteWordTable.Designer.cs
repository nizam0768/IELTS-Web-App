// <auto-generated />
using System;
using IELTS.EntityModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IELTS.EntityModels.Migrations
{
    [DbContext(typeof(IELTSStoreDbContext))]
    [Migration("20250715171900_MyFavoriteWordTable")]
    partial class MyFavoriteWordTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IELTS.EntityModels.Models.MyFavoriteWords", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("WordId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WordId");

                    b.ToTable("MyFavoriteWords", "dbo");
                });

            modelBuilder.Entity("IELTS.EntityModels.Models.WordMeaning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("MoreInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PartofSpeech")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Pronunciation")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RelatedWords")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("WordMeanings", "dbo");
                });

            modelBuilder.Entity("IELTS.EntityModels.Models.MyFavoriteWords", b =>
                {
                    b.HasOne("IELTS.EntityModels.Models.WordMeaning", "WordMeaning")
                        .WithMany()
                        .HasForeignKey("WordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WordMeaning");
                });
#pragma warning restore 612, 618
        }
    }
}
