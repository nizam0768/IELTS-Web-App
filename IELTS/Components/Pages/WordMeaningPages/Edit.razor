@page "/wordmeanings/edit"
@using Microsoft.EntityFrameworkCore
@using IELTS.EntityModels.Models
@inject IDbContextFactory<IELTS.EntityModels.IELTSStoreDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>WordMeaning</h2>
<hr />
@if (WordMeaning is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-7">
            <EditForm method="post" Model="WordMeaning" OnValidSubmit="UpdateWordMeaning" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="WordMeaning.Id" value="@WordMeaning.Id" />
                <div class="mb-3">
                    <label for="word" class="form-label">Word:</label>
                    <InputText id="word" @bind-Value="WordMeaning.Word" class="form-control" />
                    <ValidationMessage For="() => WordMeaning.Word" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="partofspeech" class="form-label">PartofSpeech:</label>
                    <InputText id="partofspeech" @bind-Value="WordMeaning.PartofSpeech" class="form-control" />
                    <ValidationMessage For="() => WordMeaning.PartofSpeech" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="pronunciation" class="form-label">Pronunciation:</label>
                    <InputText id="pronunciation" @bind-Value="WordMeaning.Pronunciation" class="form-control" />
                    <ValidationMessage For="() => WordMeaning.Pronunciation" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="definition" class="form-label">Definition:</label>
                    <InputTextArea id="definition" @bind-Value="WordMeaning.Definition" class="form-control" />
                    <ValidationMessage For="() => WordMeaning.Definition" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="usage" class="form-label">Usage:</label>
                    <InputTextArea id="usage" @bind-Value="WordMeaning.Usage" class="form-control" />
                    <ValidationMessage For="() => WordMeaning.Usage" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="relatedwords" class="form-label">RelatedWords:</label>
                    <InputTextArea id="relatedwords" @bind-Value="WordMeaning.RelatedWords" class="form-control" />
                    <ValidationMessage For="() => WordMeaning.RelatedWords" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="moreinfo" class="form-label">MoreInfo:</label>
                    <InputTextArea id="moreinfo" @bind-Value="WordMeaning.MoreInfo" class="form-control" />
                    <ValidationMessage For="() => WordMeaning.MoreInfo" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputTextArea id="createdby" @bind-Value="WordMeaning.CreatedBy" class="form-control" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputTextArea id="updatedby" @bind-Value="WordMeaning.UpdatedBy" class="form-control" />
                </div>             
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/wordmeanings">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private WordMeaning? WordMeaning { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        WordMeaning ??= await context.WordMeanings.FirstOrDefaultAsync(m => m.Id == Id);

        if (WordMeaning is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateWordMeaning()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(WordMeaning!).State = EntityState.Modified;
        WordMeaning!.UpdatedOn = DateTime.UtcNow;
        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!WordMeaningExists(WordMeaning!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/wordmeanings");
    }

    private bool WordMeaningExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.WordMeanings.Any(e => e.Id == id);
    }
}
