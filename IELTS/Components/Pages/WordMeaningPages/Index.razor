@page "/wordmeanings"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using IELTS.EntityModels.Models
@using IELTS.EntityModels
@using MudBlazor
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
@inject IJSRuntime JS
@inject IDbContextFactory<IELTS.EntityModels.IELTSStoreDbContext> DbFactory

<PageTitle>Index</PageTitle>
<div class="row">
    <div class="col-sm-10">
        <h1>Add New Word</h1> 
    </div>
    <div class="col-sm-2">
        <a class="btn btn-primary" href="wordmeanings/create">Create New</a>
    </div>
</div>
<table id="IndexCard" class="display">
    <thead>
        <tr>
            <th>Word</th>
            <th>Part of Speech</th>
            <th style="max-width: 250px; min-width: 200px;">Pronunciation</th>
            <th style="max-width: 250px; min-width: 200px;">Definition</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in context.WordMeanings)
        {
            <tr>
                <td>@item.Word</td>
                <td>@item.PartofSpeech</td>
                <td style="max-width: 250px; min-width: 200px;">@item.Pronunciation</td>
                <td style="max-width: 250px; min-width: 200px;">@item.Definition</td>
                <td>
                    <a class="link-primary" href="@($"wordmeanings/edit?id={item.Id}")">Edit</a> |
                    <a class="link-info" href="@($"wordmeanings/details?id={item.Id}")">Details</a> |
                    <a class="link-danger" href="@($"wordmeanings/delete?id={item.Id}")">Delete</a>
                </td>
            </tr>
        }
    </tbody>
</table>



@code {
    private IELTSStoreDbContext context = default!;
    //private IEnumerable<WordMeaning> Elements = new List<WordMeaning>();
    private string? toastMessage;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("OnAfterRenderAsync called: " + firstRender);

            await JS.InvokeVoidAsync("blazorInterop.applyDataTable", "IndexCard");
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);

            if (query.TryGetValue("message", out var message))
            {
                string messageValue = message.ToString(); // ✅ fix here

                string toastText = messageValue switch
                {
                    "added" => "Word added successfully",
                    "deleted" => "Word deleted successfully",
                    "updated" => "Word updated successfully",
                    _ => null
                };

                if (toastText != null)
                {
                    await JS.InvokeVoidAsync("alert", toastText);
                    var cleanUri = NavigationManager.Uri.Split('?')[0];
                    NavigationManager.NavigateTo(cleanUri);
                }
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
