@page "/wordmeanings/delete"
@using Microsoft.EntityFrameworkCore
@using IELTS.EntityModels.Models
@inject IDbContextFactory<IELTS.EntityModels.IELTSStoreDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>WordMeaning</h2>
    <hr />
    @if (wordmeaning is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Word</dt>
            <dd class="col-sm-10">@wordmeaning.Word</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PartofSpeech</dt>
            <dd class="col-sm-10">@wordmeaning.PartofSpeech</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Pronunciation</dt>
            <dd class="col-sm-10">@wordmeaning.Pronunciation</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Definition</dt>
            <dd class="col-sm-10">@wordmeaning.Definition</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Usage</dt>
            <dd class="col-sm-10">@wordmeaning.Usage</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">RelatedWords</dt>
            <dd class="col-sm-10">@wordmeaning.RelatedWords</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">MoreInfo</dt>
            <dd class="col-sm-10">@wordmeaning.MoreInfo</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@wordmeaning.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@wordmeaning.UpdatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DeletedBy</dt>
            <dd class="col-sm-10">@wordmeaning.DeletedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedOn</dt>
            <dd class="col-sm-10">@wordmeaning.CreatedOn</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedOn</dt>
            <dd class="col-sm-10">@wordmeaning.UpdatedOn</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DeletedOn</dt>
            <dd class="col-sm-10">@wordmeaning.DeletedOn</dd>
        </dl>
        <EditForm method="post" Model="wordmeaning" OnValidSubmit="DeleteWordMeaning" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(wordmeaning is null)">Delete</button> |
            <a href="/wordmeanings">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private WordMeaning? wordmeaning;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        wordmeaning = await context.WordMeanings.FirstOrDefaultAsync(m => m.Id == Id);

        if (wordmeaning is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteWordMeaning()
    {
        using var context = DbFactory.CreateDbContext();
        context.WordMeanings.Remove(wordmeaning!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/wordmeanings?message=deleted");
    }
}
