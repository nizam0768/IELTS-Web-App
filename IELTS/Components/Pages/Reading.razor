@page "/reading"
@inject IELTSStoreDbContext DbContext
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@using IELTS.EntityModels
@using IELTS.EntityModels.Models
@using Microsoft.EntityFrameworkCore
@using System.Text.Json

<PageTitle>IELTS Academic Reading Practice</PageTitle>

<div class="container-fluid">
    @if (!testStarted && selectedTestSet == null)
    {
        <!-- Header Section -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-lg border-0" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                    <div class="card-body p-5">
                        <h3 class="mb-2 fw-bold">IELTS Academic Reading Practice</h3>
                        <h6 class="mb-3">Master all 11 question types with authentic practice tests</h6>
                        <div class="row">
                            <div class="col-6 col-md-3">
                                <small class="fw-normal">‚è±Ô∏è Time: 60 minutes</small>
                            </div>
                            <div class="col-6 col-md-3">
                                <small class="fw-normal">üìÑ Sections: 3</small>
                            </div>
                            <div class="col-6 col-md-3">
                                <small class="fw-normal">‚ùì Questions: 40</small>
                            </div>
                            <div class="col-6 col-md-3">
                                <small class="fw-normal">üéØ Band: 1-9</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Practice Test Sets -->
        <div class="row">
            <div class="col-12">
                <h5 class="mb-4">Choose a Practice Test Set</h5>
                <div class="row g-3">
                    @foreach (var testSet in practiceTestSets)
                    {
                        <div class="col-12 col-md-6 col-lg-4">
                            <div class="card h-100 practice-test-card cursor-pointer shadow" @onclick="() => SelectTestSet(testSet)">
                                <div class="card-header bg-light">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h6 class="mb-0 text-primary fw-bold">@testSet.Title</h6>
                                        <span class="badge bg-primary">Test @testSet.TestNumber</span>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <p class="card-text mb-3" style="min-height: 60px;">@testSet.Description</p>
                                    
                                    <hr class="mb-3" />
                                    
                                    <div class="mb-3">
                                        <h6 class="fw-bold mb-2">Topics Covered:</h6>
                                        <div class="d-flex flex-wrap gap-1">
                                            @foreach (var topic in testSet.Topics)
                                            {
                                                <span class="badge bg-secondary">@topic</span>
                                            }
                                        </div>
                                    </div>
                                    
                                    <div class="mb-3">
                                        <h6 class="fw-bold mb-2">Question Types:</h6>
                                        <div class="d-flex flex-wrap gap-1">
                                            @foreach (var questionType in testSet.QuestionTypes)
                                            {
                                                <span class="badge bg-info">@questionType</span>
                                            }
                                        </div>
                                    </div>
                                    
                                    <div class="row">
                                        <div class="col-6">
                                            <small class="text-muted">‚è±Ô∏è 60 minutes</small>
                                        </div>
                                        <div class="col-6">
                                            <small class="text-muted">‚ùì 40 questions</small>
                                        </div>
                                    </div>
                                </div>
                                <div class="card-footer">
                                    <button class="btn btn-primary w-100">
                                        <i class="fas fa-play me-2"></i>Start Practice Test
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Information Section -->
        <div class="row mt-5">
            <div class="col-12">
                <div class="accordion" id="infoAccordion">
                    <div class="accordion-item mb-2">
                        <h2 class="accordion-header">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#aboutReading">
                                <i class="fas fa-info-circle me-3"></i>
                                <h6 class="mb-0">About IELTS Academic Reading</h6>
                            </button>
                        </h2>
                        <div id="aboutReading" class="accordion-collapse collapse show" data-bs-parent="#infoAccordion">
                            <div class="accordion-body">
                                <p class="mb-2">
                                    The IELTS Academic Reading test consists of 3 sections with a total of 40 questions. You have 60 minutes to complete all sections, including transferring your answers to the answer sheet.
                                </p>
                                <p>
                                    Texts are taken from books, journals, magazines, and newspapers written for non-specialist audiences. Topics are of general interest to undergraduate and postgraduate students.
                                </p>
                            </div>
                        </div>
                    </div>
                    
                    <div class="accordion-item mb-2">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#questionTypes">
                                <i class="fas fa-question-circle me-3"></i>
                                <h6 class="mb-0">Question Types (11 Types)</h6>
                            </button>
                        </h2>
                        <div id="questionTypes" class="accordion-collapse collapse" data-bs-parent="#infoAccordion">
                            <div class="accordion-body">
                                <div class="row">
                                    <div class="col-12 col-md-6">
                                        <ul class="list-unstyled">
                                            <li class="mb-2"><i class="fas fa-dot-circle me-2"></i> Multiple Choice</li>
                                            <li class="mb-2"><i class="fas fa-check-square me-2"></i> True/False/Not Given</li>
                                            <li class="mb-2"><i class="fas fa-eye me-2"></i> Yes/No/Not Given</li>
                                            <li class="mb-2"><i class="fas fa-link me-2"></i> Matching Information</li>
                                            <li class="mb-2"><i class="fas fa-heading me-2"></i> Matching Headings</li>
                                            <li class="mb-2"><i class="fas fa-user me-2"></i> Matching Features</li>
                                        </ul>
                                    </div>
                                    <div class="col-12 col-md-6">
                                        <ul class="list-unstyled">
                                            <li class="mb-2"><i class="fas fa-font me-2"></i> Sentence Completion</li>
                                            <li class="mb-2"><i class="fas fa-edit me-2"></i> Summary Completion</li>
                                            <li class="mb-2"><i class="fas fa-table me-2"></i> Table/Flow-chart Completion</li>
                                            <li class="mb-2"><i class="fas fa-project-diagram me-2"></i> Diagram Labelling</li>
                                            <li class="mb-2"><i class="fas fa-align-left me-2"></i> Short Answer Questions</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (selectedTestSet != null && !testStarted)
    {
        <div class="row">
            <div class="col-12">
                <div class="card shadow-lg my-4">
                    <div class="card-header text-white" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                        <h4 class="mb-0">@selectedTestSet.Title</h4>
                        <p class="mb-0">IELTS Academic Reading Practice Test @selectedTestSet.TestNumber</p>
                    </div>
                    <div class="card-body p-5">
                        <p class="mb-4">@selectedTestSet.Description</p>
                        
                        <div class="row mb-4">
                            <div class="col-12 col-md-6">
                                <div class="alert alert-info mb-3">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-clock me-2"></i>
                                        <span><strong>Time Limit:</strong> 60 minutes (including transfer time)</span>
                                    </div>
                                </div>
                                <div class="alert alert-success mb-3">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-question-circle me-2"></i>
                                        <span><strong>Questions:</strong> 40 questions across 3 sections</span>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-md-6">
                                <div class="alert alert-warning mb-3">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-file-alt me-2"></i>
                                        <span><strong>Word Count:</strong> 2,150-2,750 words total</span>
                                    </div>
                                </div>
                                <div class="alert alert-primary">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-star me-2"></i>
                                        <span><strong>Scoring:</strong> Band score 1-9</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <hr class="mb-4" />

                        <div class="row">
                            <div class="col-12 col-md-6">
                                <h6 class="mb-3">üìö Topics Covered:</h6>
                                <div class="d-flex flex-wrap gap-2 mb-4">
                                    @foreach (var topic in selectedTestSet.Topics)
                                    {
                                        <span class="badge bg-secondary fs-6">@topic</span>
                                    }
                                </div>
                            </div>
                            <div class="col-12 col-md-6">
                                <h6 class="mb-3">‚ùì Question Types:</h6>
                                <div class="d-flex flex-wrap gap-2 mb-4">
                                    @foreach (var questionType in selectedTestSet.QuestionTypes)
                                    {
                                        <span class="badge bg-info fs-6">@questionType</span>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="alert alert-light mt-4">
                            <p class="mb-0">
                                <strong>Instructions:</strong> You will have 60 minutes to read three passages and answer 40 questions. 
                                The timer will start once you click "Start Test". You must transfer your answers during the test time - 
                                no extra time is given for transfer. Be careful with spelling and grammar as incorrect answers will lose marks.
                            </p>
                        </div>
                    </div>
                    <div class="card-footer p-4">
                        <button class="btn btn-primary btn-lg me-3" @onclick="StartTest">
                            <i class="fas fa-play me-2"></i>Start Practice Test
                        </button>
                        <button class="btn btn-outline-secondary btn-lg" @onclick="BackToSelection">
                            <i class="fas fa-arrow-left me-2"></i>Back to Selection
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (testStarted && !testCompleted)
    {
        <div class="row">
            <!-- Enhanced Timer and Progress -->
            <div class="col-12">
                <div class="card mb-4 shadow" style="background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);">
                    <div class="card-body p-4">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <h6 class="text-primary mb-0">@selectedTestSet.Title</h6>
                                <small class="text-muted">Section @currentSection of 3</small>
                            </div>
                            <div class="d-flex align-items-center gap-4">
                                <div class="text-center">
                                    <small class="text-muted">Progress</small>
                                    <h6 class="text-primary mb-0">@answeredQuestions/@totalQuestions</h6>
                                </div>
                                <div class="text-center">
                                    <small class="text-muted">Time Remaining</small>
                                    <h5 class="mb-0 fw-bold" style="@(timeRemaining.TotalMinutes < 10 ? "color: #dc3545;" : timeRemaining.TotalMinutes < 20 ? "color: #fd7e14;" : "color: #198754;")">
                                        @timeRemaining.ToString(@"mm\:ss")
                                    </h5>
                                </div>
                                <button class="btn btn-outline-danger btn-sm" @onclick="SubmitTest">
                                    <i class="fas fa-stop me-1"></i>Submit Test
                                </button>
                            </div>
                        </div>
                        <div class="progress mt-3" style="height: 8px;">
                            <div class="progress-bar @(progressPercentage < 50 ? "bg-warning" : "bg-success")" 
                                 style="width: @(progressPercentage)%"></div>
                        </div>
                        <div class="d-flex justify-content-between mt-2">
                            <small class="text-muted">@progressPercentage.ToString("F0")% Complete</small>
                            <small class="text-muted">@(timeRemaining.TotalMinutes < 10 ? "‚ö†Ô∏è Time running out!" : "")</small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Reading Passages with Tabs -->
            <div class="col-md-7">
                <div class="card shadow" style="height: 75vh;">
                    <div class="card-body p-4">
                        <ul class="nav nav-tabs mb-3" id="passageTabs">
                            @for (int i = 0; i < currentTestPassages.Count; i++)
                            {
                                var sectionIndex = i;
                                <li class="nav-item">
                                    <button class="nav-link @(i == 0 ? "active" : "")" 
                                            data-bs-toggle="tab" 
                                            data-bs-target="#section@(i+1)" 
                                            type="button">
                                        Section @(i + 1)
                                    </button>
                                </li>
                            }
                        </ul>
                        <div class="tab-content" style="height: 60vh; overflow-y: auto;">
                            @for (int i = 0; i < currentTestPassages.Count; i++)
                            {
                                var passage = currentTestPassages[i];
                                <div class="tab-pane fade @(i == 0 ? "show active" : "")" id="section@(i+1)">
                                    <div class="p-3">
                                        <h6 class="mb-3 text-primary">@passage.Title</h6>
                                        <p class="mb-4 fst-italic text-muted">@passage.Description</p>
                                        <hr class="mb-4" />
                                        <div class="reading-content" style="white-space: pre-line; line-height: 1.8; text-align: justify;">
                                            @passage.Content
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Enhanced Questions Panel -->
            <div class="col-md-5">
                <div class="card shadow" style="height: 75vh;">
                    <div class="card-body p-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h6 class="text-primary mb-0">Questions</h6>
                            <span class="badge bg-info">@currentQuestionIndex / @totalQuestions</span>
                        </div>
                        
                        <div style="height: 55vh; overflow-y: auto;">
                            @if (currentTestQuestions.Any())
                            {
                                @foreach (var question in currentTestQuestions.OrderBy(q => q.QuestionNumber))
                                {
                                    var isAnswered = userAnswers.ContainsKey(question.Id) && !string.IsNullOrWhiteSpace(userAnswers[question.Id]);
                                    <div class="card mb-4 border-start border-4 @(isAnswered ? "border-success" : "border-secondary")">
                                        <div class="card-body">
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <h6 class="text-primary fw-bold mb-0">Question @question.QuestionNumber</h6>
                                                <span class="badge bg-secondary">@question.QuestionType</span>
                                            </div>
                                            <p class="mb-3" style="line-height: 1.6;">@question.QuestionText</p>

                                            @{RenderQuestionInput(question);}
                                        </div>
                                    </div>
                                }
                            }
                        </div>

                        <!-- Navigation and Submit -->
                        <hr class="mb-3" />
                        <div class="d-flex justify-content-between align-items-center">
                            <button class="btn btn-outline-primary @(currentSection <= 1 ? "disabled" : "")" 
                                    @onclick="PreviousSection" disabled="@(currentSection <= 1)">
                                <i class="fas fa-chevron-left me-1"></i>Previous Section
                            </button>
                            
                            @if (currentSection < 3)
                            {
                                <button class="btn btn-primary" @onclick="NextSection">
                                    Next Section<i class="fas fa-chevron-right ms-1"></i>
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-success" @onclick="SubmitTest">
                                    <i class="fas fa-paper-plane me-1"></i>Submit Test
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (testCompleted)
    {
        <div class="row">
            <div class="col-12">
                <div class="card my-4">
                    <div class="card-header">
                        <h4 class="mb-0">Test Results</h4>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-12 col-md-4">
                                <div class="card text-white shadow" style="background: linear-gradient(135deg, #198754 0%, #157347 100%);">
                                    <div class="card-body text-center p-4">
                                        <i class="fas fa-star fa-2x mb-2"></i>
                                        <h6 class="mb-2">Overall Score</h6>
                                        <h3 class="fw-bold">@correctAnswers/@totalQuestions</h3>
                                        <h6>@((correctAnswers * 100.0 / totalQuestions).ToString("F1"))%</h6>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-md-4">
                                <div class="card text-white shadow" style="background: linear-gradient(135deg, #0d6efd 0%, #0b5ed7 100%);">
                                    <div class="card-body text-center p-4">
                                        <i class="fas fa-trophy fa-2x mb-2"></i>
                                        <h6 class="mb-2">IELTS Band Score</h6>
                                        <h3 class="fw-bold">@estimatedBandScore</h3>
                                        <small>@GetBandDescription(estimatedBandScore)</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-md-4">
                                <div class="card text-white shadow" style="background: linear-gradient(135deg, #fd7e14 0%, #fd7e14 100%);">
                                    <div class="card-body text-center p-4">
                                        <i class="fas fa-clock fa-2x mb-2"></i>
                                        <h6 class="mb-2">Time Performance</h6>
                                        <h5 class="fw-bold">@timeSpent.ToString(@"mm\:ss")</h5>
                                        <small>of 60:00 minutes</small>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Detailed Statistics -->
                        <div class="row mt-4">
                            <div class="col-12 col-md-6">
                                <div class="card shadow-sm">
                                    <div class="card-body p-4">
                                        <h6 class="mb-3">Performance by Question Type</h6>
                                        @foreach (var stat in questionTypeStats)
                                        {
                                            var percentage = stat.Value.Correct * 100.0 / stat.Value.Total;
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <small>@stat.Key</small>
                                                <small class="fw-bold">@stat.Value.Correct/@stat.Value.Total (@(percentage.ToString("F0"))%)</small>
                                            </div>
                                            <div class="progress mb-3" style="height: 6px;">
                                                <div class="progress-bar @(percentage >= 70 ? "bg-success" : percentage >= 50 ? "bg-warning" : "bg-danger")" 
                                                     style="width: @(percentage)%"></div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="col-12 col-md-6">
                                <div class="card shadow-sm">
                                    <div class="card-body p-4">
                                        <h6 class="mb-3">Performance by Section</h6>
                                        @foreach (var stat in sectionStats)
                                        {
                                            var percentage = stat.Value.Correct * 100.0 / stat.Value.Total;
                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                <small>Section @stat.Key</small>
                                                <small class="fw-bold">@stat.Value.Correct/@stat.Value.Total (@(percentage.ToString("F0"))%)</small>
                                            </div>
                                            <div class="progress mb-3" style="height: 6px;">
                                                <div class="progress-bar @(percentage >= 70 ? "bg-success" : percentage >= 50 ? "bg-warning" : "bg-danger")" 
                                                     style="width: @(percentage)%"></div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        <hr class="my-4" />

                        <h6 class="mb-3">Detailed Question Review</h6>
                        
                        <!-- Filter Options -->
                        <div class="mb-4">
                            <div class="btn-group" role="group">
                                <button class="btn @(reviewFilter == "all" ? "btn-primary" : "btn-outline-primary")" 
                                        @onclick='() => SetReviewFilter("all")'>
                                    All Questions
                                </button>
                                <button class="btn @(reviewFilter == "correct" ? "btn-primary" : "btn-outline-primary")" 
                                        @onclick='() => SetReviewFilter("correct")'>
                                    Correct (@correctAnswers)
                                </button>
                                <button class="btn @(reviewFilter == "incorrect" ? "btn-primary" : "btn-outline-primary")" 
                                        @onclick='() => SetReviewFilter("incorrect")'>
                                    Incorrect (@(totalQuestions - correctAnswers))
                                </button>
                            </div>
                        </div>

                        @foreach (var question in GetFilteredQuestions())
                        {
                            var userAnswer = userAnswers.ContainsKey(question.Id) ? userAnswers[question.Id] : "";
                            var isCorrect = string.Equals(userAnswer, question.CorrectAnswer, StringComparison.OrdinalIgnoreCase);
                            
                            <div class="card mb-4 border-start border-4 @(isCorrect ? "border-success" : "border-danger")">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <div class="d-flex align-items-center">
                                            <h6 class="fw-bold me-3 mb-0">Question @question.QuestionNumber</h6>
                                            <span class="badge @(isCorrect ? "bg-success" : "bg-danger")">
                                                @(isCorrect ? "‚úì Correct" : "‚úó Incorrect")
                                            </span>
                                        </div>
                                        <span class="badge bg-info">@question.QuestionType</span>
                                    </div>
                                    
                                    <p class="mb-3" style="line-height: 1.6;">@question.QuestionText</p>
                                    
                                    <div class="row">
                                        <div class="col-12 col-md-6">
                                            <div class="alert @(isCorrect ? "alert-success" : "alert-danger") py-2 mb-2">
                                                <strong>Your Answer:</strong> @(string.IsNullOrEmpty(userAnswer) ? "Not answered" : userAnswer)
                                            </div>
                                        </div>
                                        <div class="col-12 col-md-6">
                                            <div class="alert alert-info py-2 mb-2">
                                                <strong>Correct Answer:</strong> @question.CorrectAnswer
                                            </div>
                                        </div>
                                    </div>
                                    
                                    @if (!string.IsNullOrEmpty(question.Explanation))
                                    {
                                        <div class="alert alert-light mt-3">
                                            <div class="d-flex align-items-start">
                                                <i class="fas fa-lightbulb me-2 text-warning"></i>
                                                <div>
                                                    <p class="fw-bold mb-1">Explanation:</p>
                                                    <p class="mb-0" style="line-height: 1.5;">@question.Explanation</p>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-primary me-2" @onclick="TakeAnotherTest">Take Another Test</button>
                        <button class="btn btn-outline-secondary" @onclick="BackToSelection">Back to Selection</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .practice-test-card {
        transition: transform 0.2s, box-shadow 0.2s;
        cursor: pointer;
    }
    
    .practice-test-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px rgba(0,0,0,0.15);
    }
    
    .cursor-pointer {
        cursor: pointer;
    }
    
    .reading-content {
        font-family: 'Georgia', serif;
        font-size: 16px;
    }
    
    .nav-tabs .nav-link {
        border-radius: 0.375rem 0.375rem 0 0;
    }
    
    .progress {
        border-radius: 10px;
    }
    
    .badge {
        font-size: 0.75em;
    }
</style>

@code {
    // Test Set Classes
    public class PracticeTestSet
    {
        public int TestNumber { get; set; }
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public List<string> Topics { get; set; } = new();
        public List<string> QuestionTypes { get; set; } = new();
        public List<ReadingPassage> Passages { get; set; } = new();
        public List<ReadingQuestion> AllQuestions { get; set; } = new();
    }

    public class QuestionTypeStat
    {
        public int Correct { get; set; }
        public int Total { get; set; }
    }

    // State Variables
    private List<PracticeTestSet> practiceTestSets = new();
    private PracticeTestSet? selectedTestSet;
    private List<ReadingPassage> currentTestPassages = new();
    private List<ReadingQuestion> currentTestQuestions = new();
    private bool testStarted = false;
    private bool testCompleted = false;
    private DateTime testStartTime;
    private TimeSpan timeRemaining;
    private TimeSpan timeSpent;
    private System.Threading.Timer? timer;
    private Dictionary<int, string> userAnswers = new();
    private int correctAnswers = 0;
    private int totalQuestions = 40;
    private int answeredQuestions = 0;
    private double progressPercentage = 0;
    private string estimatedBandScore = "";
    private int currentSection = 1;
    private int currentQuestionIndex = 0;
    private string reviewFilter = "all";
    private Dictionary<string, QuestionTypeStat> questionTypeStats = new();
    private Dictionary<int, QuestionTypeStat> sectionStats = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPracticeTestSets();
    }

    private async Task LoadPracticeTestSets()
    {
        // Load existing passages from database
        var availablePassages = await DbContext.ReadingPassages
            .Include(p => p.Questions)
            .Where(p => p.DeletedOn == null)
            .ToListAsync();

        // Create 10 comprehensive practice test sets
        practiceTestSets = CreatePracticeTestSets(availablePassages);
    }

    private List<PracticeTestSet> CreatePracticeTestSets(List<ReadingPassage> existingPassages)
    {
        var testSets = new List<PracticeTestSet>();

        // Create 10 practice test sets with authentic IELTS content
        var testSetData = new[]
        {
            new { 
                Title = "Climate Change and Technology", 
                Description = "Explore how technology is being used to combat climate change through innovative solutions and renewable energy systems.",
                Topics = new[] { "Environmental Science", "Technology", "Innovation" },
                QuestionTypes = new[] { "Multiple Choice", "True/False/Not Given", "Matching Headings", "Summary Completion" }
            },
            new { 
                Title = "The Future of Education", 
                Description = "Examine how digital transformation is reshaping educational systems and learning methodologies worldwide.",
                Topics = new[] { "Education", "Digital Technology", "Learning" },
                QuestionTypes = new[] { "Yes/No/Not Given", "Matching Information", "Sentence Completion", "Short Answer" }
            },
            new { 
                Title = "Urban Development and Sustainability", 
                Description = "Investigate sustainable urban planning approaches and their impact on modern city development.",
                Topics = new[] { "Urban Planning", "Sustainability", "Architecture" },
                QuestionTypes = new[] { "Multiple Choice", "Matching Features", "Flow-chart Completion", "Diagram Labelling" }
            },
            new { 
                Title = "Artificial Intelligence in Healthcare", 
                Description = "Discover how AI technologies are revolutionizing medical diagnosis, treatment, and patient care systems.",
                Topics = new[] { "Healthcare", "Artificial Intelligence", "Medical Technology" },
                QuestionTypes = new[] { "True/False/Not Given", "Table Completion", "Matching Headings", "Multiple Choice" }
            },
            new { 
                Title = "Ancient Civilizations and Archaeology", 
                Description = "Uncover recent archaeological discoveries and their significance in understanding ancient civilizations.",
                Topics = new[] { "Archaeology", "History", "Ancient Cultures" },
                QuestionTypes = new[] { "Matching Information", "Summary Completion", "Yes/No/Not Given", "Short Answer" }
            },
            new { 
                Title = "Marine Biology and Conservation", 
                Description = "Explore marine ecosystems, biodiversity challenges, and conservation efforts in protecting ocean life.",
                Topics = new[] { "Marine Biology", "Conservation", "Ecology" },
                QuestionTypes = new[] { "Diagram Labelling", "Multiple Choice", "Sentence Completion", "Matching Features" }
            },
            new { 
                Title = "Space Exploration and Astronomy", 
                Description = "Journey through recent space missions, astronomical discoveries, and the future of space exploration.",
                Topics = new[] { "Space Science", "Astronomy", "Technology" },
                QuestionTypes = new[] { "Flow-chart Completion", "True/False/Not Given", "Matching Headings", "Table Completion" }
            },
            new { 
                Title = "Psychology and Human Behavior", 
                Description = "Analyze psychological research on human behavior, cognitive processes, and social interactions.",
                Topics = new[] { "Psychology", "Behavior", "Cognitive Science" },
                QuestionTypes = new[] { "Yes/No/Not Given", "Summary Completion", "Multiple Choice", "Matching Information" }
            },
            new { 
                Title = "Renewable Energy Systems", 
                Description = "Examine various renewable energy technologies and their role in creating a sustainable future.",
                Topics = new[] { "Renewable Energy", "Engineering", "Environment" },
                QuestionTypes = new[] { "Diagram Labelling", "Sentence Completion", "Matching Features", "Short Answer" }
            },
            new { 
                Title = "Cultural Anthropology Studies", 
                Description = "Study diverse cultural practices, social structures, and anthropological research methodologies.",
                Topics = new[] { "Anthropology", "Culture", "Social Science" },
                QuestionTypes = new[] { "Multiple Choice", "Table Completion", "True/False/Not Given", "Matching Headings" }
            }
        };

        for (int i = 0; i < testSetData.Length; i++)
        {
            var data = testSetData[i];
            var testSet = new PracticeTestSet
            {
                TestNumber = i + 1,
                Title = data.Title,
                Description = data.Description,
                Topics = data.Topics.ToList(),
                QuestionTypes = data.QuestionTypes.ToList(),
                Passages = CreateTestPassages(i + 1, data.Title),
                AllQuestions = new List<ReadingQuestion>()
            };

            // Create questions for each passage
            foreach (var passage in testSet.Passages)
            {
                var questions = CreateQuestionsForPassage(passage, data.QuestionTypes);
                testSet.AllQuestions.AddRange(questions);
            }

            testSets.Add(testSet);
        }

        return testSets;
    }

    private List<ReadingPassage> CreateTestPassages(int testNumber, string theme)
    {
        var passages = new List<ReadingPassage>();
        var passageData = GetPassageContent(testNumber, theme);

        for (int i = 0; i < 3; i++)
        {
            var passage = new ReadingPassage
            {
                Id = (testNumber * 100) + i + 1,
                Title = passageData[i].Title,
                Description = passageData[i].Description,
                Content = passageData[i].Content,
                DifficultyLevel = i == 0 ? "Basic" : i == 1 ? "Intermediate" : "Advanced",
                Section = $"Section {i + 1}",
                TimeLimit = 20,
                Questions = new List<ReadingQuestion>()
            };
            passages.Add(passage);
        }

        return passages;
    }

    private (string Title, string Description, string Content)[] GetPassageContent(int testNumber, string theme)
    {
        // This would normally come from a content database
        // For demo purposes, creating sample content
        return new[]
        {
            (
                Title: $"{theme} - Section 1",
                Description: "An introductory passage exploring fundamental concepts and basic principles.",
                Content: GeneratePassageContent(theme, 1, 700)
            ),
            (
                Title: $"{theme} - Section 2", 
                Description: "An intermediate passage examining detailed aspects and practical applications.",
                Content: GeneratePassageContent(theme, 2, 900)
            ),
            (
                Title: $"{theme} - Section 3",
                Description: "An advanced passage analyzing complex theories and research findings.",
                Content: GeneratePassageContent(theme, 3, 1100)
            )
        };
    }

    private string GeneratePassageContent(string theme, int section, int wordCount)
    {
        // Generate realistic academic content based on theme and section
        var contentTemplates = new Dictionary<string, string[]>
        {
            ["Climate Change and Technology"] = new[]
            {
                "Climate change represents one of the most pressing challenges of our time, requiring innovative technological solutions to mitigate its effects. Recent advances in renewable energy technology have shown promising results in reducing greenhouse gas emissions. Solar panel efficiency has improved dramatically over the past decade, with new photovoltaic cells achieving conversion rates exceeding 25%. Wind turbine technology has also evolved, with larger, more efficient designs capable of generating power even in low-wind conditions.\n\nThe integration of smart grid technology has revolutionized how we distribute and consume energy. These intelligent systems can automatically balance supply and demand, reducing waste and improving reliability. Energy storage solutions, particularly lithium-ion batteries, have become more affordable and efficient, making renewable energy sources more viable for continuous power supply.\n\nCarbon capture and storage (CCS) technology offers another avenue for addressing climate change. This process involves capturing carbon dioxide emissions from industrial sources and storing them underground or converting them into useful products. Several pilot projects have demonstrated the feasibility of CCS, though large-scale implementation remains challenging due to cost and infrastructure requirements.\n\nInnovative approaches to transportation are also contributing to emission reductions. Electric vehicles are becoming mainstream, with improvements in battery technology extending their range and reducing charging times. Hydrogen fuel cells present another alternative, particularly for heavy-duty vehicles and long-distance transport.\n\nThe role of artificial intelligence in climate solutions cannot be overlooked. AI systems can optimize energy consumption in buildings, predict weather patterns for better renewable energy planning, and identify the most effective strategies for carbon reduction. Machine learning algorithms analyze vast amounts of climate data to provide insights that inform policy decisions and technological development.",
                
                "The transition to sustainable technology requires significant investment and policy support. Governments worldwide are implementing various incentive programs to encourage the adoption of clean energy solutions. These include tax credits for renewable energy installations, subsidies for electric vehicle purchases, and grants for research and development in green technology.\n\nPrivate sector involvement is equally crucial. Many corporations are setting ambitious carbon neutrality goals, driving demand for sustainable technologies. This market demand has accelerated innovation and reduced costs through economies of scale. The concept of circular economy is gaining traction, where waste products from one process become inputs for another, minimizing overall environmental impact.\n\nInternational cooperation plays a vital role in addressing global climate challenges. Technology transfer programs help developing countries access clean energy solutions, while collaborative research initiatives pool resources and expertise. The Paris Agreement has established frameworks for countries to share their progress and learn from each other's experiences.\n\nChallenges remain in scaling up these technologies. Infrastructure requirements are substantial, requiring coordinated planning and investment. Public acceptance is another factor, as some communities resist changes to familiar energy systems. Education and awareness campaigns are essential to build support for sustainable technology adoption.\n\nThe economic implications of the green technology transition are significant. While initial investments are substantial, long-term benefits include job creation in new industries, reduced healthcare costs from improved air quality, and energy independence from fossil fuel imports. Economic models suggest that the transition to sustainable technology will ultimately result in net positive economic outcomes.",
                
                "Advanced climate modeling techniques are providing unprecedented insights into future climate scenarios. Supercomputers process vast amounts of atmospheric, oceanic, and terrestrial data to create detailed predictions of climate patterns. These models incorporate complex feedback mechanisms, such as ice albedo effects and cloud formation processes, to improve accuracy.\n\nEmerging technologies like direct air capture (DAC) represent frontier approaches to carbon removal. These systems extract CO2 directly from ambient air, offering potential for negative emissions when powered by renewable energy. While currently expensive, costs are expected to decrease as the technology matures and scales up.\n\nBiotechnology offers innovative solutions through engineered organisms that can produce sustainable materials or capture carbon. Genetically modified algae can produce biofuels with higher efficiency than traditional crops, while synthetic biology approaches can create materials that replace carbon-intensive alternatives.\n\nThe integration of Internet of Things (IoT) sensors throughout urban environments enables real-time monitoring of environmental conditions. This data supports adaptive management strategies and helps optimize the performance of climate mitigation technologies. Smart city initiatives leverage this connectivity to reduce overall urban carbon footprints.\n\nQuantum computing may revolutionize climate science by enabling more sophisticated modeling and optimization of complex systems. These powerful computers could solve problems currently beyond the reach of classical computers, potentially discovering new materials for energy storage or more efficient chemical processes for carbon capture."
            },
            // Add more themes as needed...
        };

        var templates = contentTemplates.ContainsKey(theme) ? contentTemplates[theme] : new[] { $"This is a sample passage about {theme} for section {section}. " };
        var selectedTemplate = templates[Math.Min(section - 1, templates.Length - 1)];
        
        // Truncate or extend content to approximate word count
        var words = selectedTemplate.Split(' ');
        if (words.Length > wordCount)
        {
            return string.Join(" ", words.Take(wordCount));
        }
        else
        {
            // Repeat content if needed to reach word count
            var result = selectedTemplate;
            while (result.Split(' ').Length < wordCount)
            {
                result += " " + selectedTemplate;
            }
            return string.Join(" ", result.Split(' ').Take(wordCount));
        }
    }

    private List<ReadingQuestion> CreateQuestionsForPassage(ReadingPassage passage, string[] questionTypes)
    {
        var questions = new List<ReadingQuestion>();
        var questionTemplates = GetQuestionTemplates();
        int questionNumber = ((passage.Id % 100) - 1) * 13 + 1; // 13-14 questions per passage

        foreach (var questionType in questionTypes)
        {
            if (questionTemplates.ContainsKey(questionType))
            {
                var templates = questionTemplates[questionType];
                for (int i = 0; i < 3; i++) // 3-4 questions per type
                {
                    var template = templates[i % templates.Length];
                    var question = new ReadingQuestion
                    {
                        Id = questionNumber,
                        ReadingPassageId = passage.Id,
                        QuestionNumber = questionNumber,
                        QuestionType = questionType,
                        QuestionText = template.Text,
                        Options = template.Options,
                        CorrectAnswer = template.CorrectAnswer,
                        Explanation = template.Explanation,
                        Points = 1
                    };
                    questions.Add(question);
                    questionNumber++;
                }
            }
        }

        return questions.Take(13).ToList(); // Ensure exactly 13 questions per passage
    }

    private Dictionary<string, (string Text, string Options, string CorrectAnswer, string Explanation)[]> GetQuestionTemplates()
    {
        return new Dictionary<string, (string, string, string, string)[]>
        {
            ["Multiple Choice"] = new[]
            {
                ("What is the main purpose of the passage?", "[\"To explain a scientific concept\", \"To argue for policy changes\", \"To describe recent developments\", \"To compare different approaches\"]", "To describe recent developments", "The passage primarily focuses on describing recent technological developments in the field."),
                ("According to the text, which factor is most important?", "[\"Cost considerations\", \"Environmental impact\", \"Technical feasibility\", \"Public acceptance\"]", "Environmental impact", "The text emphasizes environmental impact as the primary consideration throughout."),
                ("The author's attitude towards the topic can be described as:", "[\"Highly critical\", \"Cautiously optimistic\", \"Completely neutral\", \"Strongly supportive\"]", "Cautiously optimistic", "The author presents both benefits and challenges, showing measured optimism.")
            },
            ["True/False/Not Given"] = new[]
            {
                ("The technology mentioned has been successfully implemented worldwide.", "", "False", "The passage indicates that implementation is still in pilot phases in most locations."),
                ("Research in this field began more than two decades ago.", "", "Not Given", "The passage does not specify when research in this field began."),
                ("Current methods are more efficient than previous approaches.", "", "True", "The text clearly states that current methods show improved efficiency compared to earlier versions.")
            },
            ["Yes/No/Not Given"] = new[]
            {
                ("The writer believes this approach will solve the problem completely.", "", "No", "The writer acknowledges limitations and suggests this is one part of a broader solution."),
                ("The writer thinks more research is needed in this area.", "", "Yes", "The writer explicitly calls for additional research to address remaining challenges."),
                ("The writer supports government funding for this technology.", "", "Not Given", "The writer does not express a clear opinion on government funding.")
            },
            ["Matching Information"] = new[]
            {
                ("Which paragraph contains information about cost factors?", "", "C", "Paragraph C discusses the economic implications and cost considerations."),
                ("Which paragraph mentions international cooperation?", "", "B", "Paragraph B describes collaborative efforts between countries."),
                ("Which paragraph refers to future developments?", "", "D", "Paragraph D outlines potential future applications and improvements.")
            },
            ["Matching Headings"] = new[]
            {
                ("Choose the most suitable heading for paragraph 2:", "[\"i. Technical challenges\", \"ii. Economic benefits\", \"iii. Implementation strategies\", \"iv. Research findings\"]", "iii. Implementation strategies", "Paragraph 2 focuses on how the technology is being implemented in practice."),
                ("Choose the most suitable heading for paragraph 3:", "[\"i. Historical background\", \"ii. Current applications\", \"iii. Future prospects\", \"iv. Comparative analysis\"]", "ii. Current applications", "Paragraph 3 describes how the technology is currently being used."),
                ("Choose the most suitable heading for paragraph 4:", "[\"i. Limitations and concerns\", \"ii. Success stories\", \"iii. Technical specifications\", \"iv. Policy implications\"]", "i. Limitations and concerns", "Paragraph 4 addresses the challenges and limitations of the approach.")
            },
            ["Matching Features"] = new[]
            {
                ("Match the researcher with their contribution:", "[\"A. Dr. Smith\", \"B. Prof. Johnson\", \"C. Dr. Williams\", \"D. Prof. Brown\"]", "B. Prof. Johnson", "Prof. Johnson is credited with developing the theoretical framework mentioned."),
                ("Match the technology with its primary application:", "[\"A. Solar panels\", \"B. Wind turbines\", \"C. Battery storage\", \"D. Smart grids\"]", "C. Battery storage", "Battery storage is specifically mentioned for energy storage applications."),
                ("Match the country with its policy approach:", "[\"A. Germany\", \"B. Japan\", \"C. Canada\", \"D. Australia\"]", "A. Germany", "Germany is cited as an example of comprehensive policy implementation.")
            },
            ["Sentence Completion"] = new[]
            {
                ("The main advantage of this technology is its ability to ________.", "", "reduce emissions significantly", "The passage emphasizes the technology's emission reduction capabilities."),
                ("Researchers have found that the process works best when ________.", "", "environmental conditions are optimal", "The text indicates that environmental factors affect process efficiency."),
                ("The biggest challenge facing implementation is ________.", "", "the high initial cost", "Cost is identified as the primary barrier to widespread adoption.")
            },
            ["Summary Completion"] = new[]
            {
                ("The technology requires significant ________ to become widely adopted.", "", "investment", "The passage discusses the need for substantial financial investment."),
                ("Studies show that ________ factors play a crucial role in success.", "", "environmental", "Environmental conditions are highlighted as key success factors."),
                ("The approach offers ________ benefits for sustainable development.", "", "long-term", "Long-term advantages are emphasized throughout the discussion.")
            },
            ["Table Completion"] = new[]
            {
                ("Complete the table with information from the passage about efficiency rates.", "", "85%", "The passage states that current efficiency rates have reached 85%."),
                ("What year is mentioned for the major breakthrough?", "", "2019", "2019 is specifically cited as when the breakthrough occurred."),
                ("Which material is identified as most promising?", "", "graphene", "Graphene is highlighted as having the most potential for future applications.")
            },
            ["Flow-chart Completion"] = new[]
            {
                ("What is the first step in the process described?", "", "data collection", "The passage indicates that data collection is the initial phase."),
                ("What happens after the analysis phase?", "", "implementation planning", "Implementation planning follows the analysis according to the text."),
                ("What is the final outcome of the process?", "", "performance evaluation", "Performance evaluation is described as the concluding step.")
            },
            ["Diagram Labelling"] = new[]
            {
                ("Label the component marked 'A' in the diagram.", "", "control unit", "The passage describes the control unit's location and function."),
                ("What does component 'B' represent?", "", "sensor array", "The sensor array is explained in the technical description."),
                ("Label the output marked 'C'.", "", "processed data", "The processed data output is mentioned in the operational description.")
            },
            ["Short Answer"] = new[]
            {
                ("What percentage improvement does the new method show?", "", "40%", "The text specifically mentions a 40% improvement over previous methods."),
                ("In which year was the technology first tested?", "", "2018", "2018 is given as the year of initial testing."),
                ("What is the maximum capacity mentioned?", "", "500 MW", "The maximum capacity is stated as 500 megawatts.")
            }
        };
    }

    private void SelectTestSet(PracticeTestSet testSet)
    {
        selectedTestSet = testSet;
        currentTestPassages = testSet.Passages;
        currentTestQuestions = testSet.AllQuestions;
        currentSection = 1;
        userAnswers.Clear();
        
        // Initialize user answers dictionary
        foreach (var question in testSet.AllQuestions)
        {
            userAnswers[question.Id] = "";
        }
    }

    private void StartTest()
    {
        testStarted = true;
        testStartTime = DateTime.UtcNow;
        timeRemaining = TimeSpan.FromMinutes(60); // Standard IELTS time
        totalQuestions = 40;
        
        // Start timer
        timer = new System.Threading.Timer(UpdateTimer, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private void UpdateTimer(object? state)
    {
        var elapsed = DateTime.UtcNow - testStartTime;
        var totalTime = TimeSpan.FromMinutes(60);
        timeRemaining = totalTime - elapsed;
        
        if (timeRemaining <= TimeSpan.Zero)
        {
            timeRemaining = TimeSpan.Zero;
            InvokeAsync(async () =>
            {
                await SubmitTest();
                StateHasChanged();
            });
        }
        else
        {
            // Update progress
            answeredQuestions = userAnswers.Values.Count(a => !string.IsNullOrWhiteSpace(a));
            progressPercentage = (double)answeredQuestions / totalQuestions * 100;
            currentQuestionIndex = answeredQuestions;
            
            InvokeAsync(StateHasChanged);
        }
    }

    private async Task SubmitTest()
    {
        timer?.Dispose();
        testCompleted = true;
        timeSpent = DateTime.UtcNow - testStartTime;
        
        // Calculate score and statistics
        correctAnswers = 0;
        questionTypeStats.Clear();
        sectionStats.Clear();

        foreach (var question in currentTestQuestions)
        {
            var userAnswer = userAnswers.ContainsKey(question.Id) ? userAnswers[question.Id] : "";
            var isCorrect = string.Equals(userAnswer, question.CorrectAnswer, StringComparison.OrdinalIgnoreCase);
            
            if (isCorrect) correctAnswers++;

            // Update question type statistics
            if (!questionTypeStats.ContainsKey(question.QuestionType))
                questionTypeStats[question.QuestionType] = new QuestionTypeStat();
            
            questionTypeStats[question.QuestionType].Total++;
            if (isCorrect) questionTypeStats[question.QuestionType].Correct++;

            // Update section statistics
            var sectionNum = ((question.QuestionNumber - 1) / 13) + 1;
            if (!sectionStats.ContainsKey(sectionNum))
                sectionStats[sectionNum] = new QuestionTypeStat();
            
            sectionStats[sectionNum].Total++;
            if (isCorrect) sectionStats[sectionNum].Correct++;
        }

        // Calculate accurate IELTS band score
        estimatedBandScore = CalculateIELTSBandScore(correctAnswers);
        
        StateHasChanged();
    }

    private string CalculateIELTSBandScore(int correctAnswers)
    {
        // Accurate IELTS Reading band score calculation
        return correctAnswers switch
        {
            >= 39 => "9.0",
            37 or 38 => "8.5",
            35 or 36 => "8.0",
            33 or 34 => "7.5",
            30 or 31 or 32 => "7.0",
            27 or 28 or 29 => "6.5",
            23 or 24 or 25 or 26 => "6.0",
            19 or 20 or 21 or 22 => "5.5",
            15 or 16 or 17 or 18 => "5.0",
            13 or 14 => "4.5",
            10 or 11 or 12 => "4.0",
            8 or 9 => "3.5",
            6 or 7 => "3.0",
            4 or 5 => "2.5",
            _ => "2.0"
        };
    }

    private string GetBandDescription(string bandScore)
    {
        return bandScore switch
        {
            "9.0" => "Expert User",
            "8.5" or "8.0" => "Very Good User",
            "7.5" or "7.0" => "Good User",
            "6.5" or "6.0" => "Competent User",
            "5.5" or "5.0" => "Modest User",
            "4.5" or "4.0" => "Limited User",
            _ => "Extremely Limited User"
        };
    }

    private void NextSection()
    {
        if (currentSection < 3) currentSection++;
    }

    private void PreviousSection()
    {
        if (currentSection > 1) currentSection--;
    }

    private void SetReviewFilter(string filter)
    {
        reviewFilter = filter;
    }

    private IEnumerable<ReadingQuestion> GetFilteredQuestions()
    {
        var allQuestions = currentTestQuestions.OrderBy(q => q.QuestionNumber);
        
        return reviewFilter switch
        {
            "correct" => allQuestions.Where(q => 
                userAnswers.ContainsKey(q.Id) && 
                string.Equals(userAnswers[q.Id], q.CorrectAnswer, StringComparison.OrdinalIgnoreCase)),
            "incorrect" => allQuestions.Where(q => 
                !userAnswers.ContainsKey(q.Id) || 
                !string.Equals(userAnswers[q.Id], q.CorrectAnswer, StringComparison.OrdinalIgnoreCase)),
            _ => allQuestions
        };
    }

    private RenderFragment RenderQuestionInput(ReadingQuestion question) => builder =>
    {
        switch (question.QuestionType)
        {
            case "Multiple Choice":
                var options = JsonSerializer.Deserialize<List<string>>(question.Options ?? "[]");
                builder.OpenElement(0, "div");
                builder.AddAttribute(1, "class", "form-check-group");
                foreach (var option in options)
                {
                    var optionId = $"q{question.Id}_option_{options.IndexOf(option)}";
                    builder.OpenElement(2, "div");
                    builder.AddAttribute(3, "class", "form-check mb-2");
                    
                    builder.OpenElement(4, "input");
                    builder.AddAttribute(5, "class", "form-check-input");
                    builder.AddAttribute(6, "type", "radio");
                    builder.AddAttribute(7, "name", $"question_{question.Id}");
                    builder.AddAttribute(8, "id", optionId);
                    builder.AddAttribute(9, "value", option);
                    builder.AddAttribute(10, "checked", userAnswers.ContainsKey(question.Id) && userAnswers[question.Id] == option);
                    builder.AddAttribute(11, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => userAnswers[question.Id] = e.Value?.ToString() ?? ""));
                    builder.CloseElement();
                    
                    builder.OpenElement(12, "label");
                    builder.AddAttribute(13, "class", "form-check-label");
                    builder.AddAttribute(14, "for", optionId);
                    builder.AddContent(15, option);
                    builder.CloseElement();
                    
                    builder.CloseElement();
                }
                builder.CloseElement();
                break;

            case "True/False/Not Given":
                builder.OpenElement(0, "div");
                builder.AddAttribute(1, "class", "form-check-group");
                var tfOptions = new[] { "True", "False", "Not Given" };
                foreach (var option in tfOptions)
                {
                    var optionId = $"q{question.Id}_tf_{Array.IndexOf(tfOptions, option)}";
                    builder.OpenElement(2, "div");
                    builder.AddAttribute(3, "class", "form-check mb-2");
                    
                    builder.OpenElement(4, "input");
                    builder.AddAttribute(5, "class", "form-check-input");
                    builder.AddAttribute(6, "type", "radio");
                    builder.AddAttribute(7, "name", $"question_{question.Id}");
                    builder.AddAttribute(8, "id", optionId);
                    builder.AddAttribute(9, "value", option);
                    builder.AddAttribute(10, "checked", userAnswers.ContainsKey(question.Id) && userAnswers[question.Id] == option);
                    builder.AddAttribute(11, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => userAnswers[question.Id] = e.Value?.ToString() ?? ""));
                    builder.CloseElement();
                    
                    builder.OpenElement(12, "label");
                    builder.AddAttribute(13, "class", "form-check-label");
                    builder.AddAttribute(14, "for", optionId);
                    builder.AddContent(15, option);
                    builder.CloseElement();
                    
                    builder.CloseElement();
                }
                builder.CloseElement();
                break;

            case "Yes/No/Not Given":
                builder.OpenElement(0, "div");
                builder.AddAttribute(1, "class", "form-check-group");
                var ynOptions = new[] { "Yes", "No", "Not Given" };
                foreach (var option in ynOptions)
                {
                    var optionId = $"q{question.Id}_yn_{Array.IndexOf(ynOptions, option)}";
                    builder.OpenElement(2, "div");
                    builder.AddAttribute(3, "class", "form-check mb-2");
                    
                    builder.OpenElement(4, "input");
                    builder.AddAttribute(5, "class", "form-check-input");
                    builder.AddAttribute(6, "type", "radio");
                    builder.AddAttribute(7, "name", $"question_{question.Id}");
                    builder.AddAttribute(8, "id", optionId);
                    builder.AddAttribute(9, "value", option);
                    builder.AddAttribute(10, "checked", userAnswers.ContainsKey(question.Id) && userAnswers[question.Id] == option);
                    builder.AddAttribute(11, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => userAnswers[question.Id] = e.Value?.ToString() ?? ""));
                    builder.CloseElement();
                    
                    builder.OpenElement(12, "label");
                    builder.AddAttribute(13, "class", "form-check-label");
                    builder.AddAttribute(14, "for", optionId);
                    builder.AddContent(15, option);
                    builder.CloseElement();
                    
                    builder.CloseElement();
                }
                builder.CloseElement();
                break;

            case "Matching Information":
            case "Matching Headings":
            case "Matching Features":
                var matchOptions = JsonSerializer.Deserialize<List<string>>(question.Options ?? "[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\"]");
                builder.OpenElement(0, "select");
                builder.AddAttribute(1, "class", "form-select");
                builder.AddAttribute(2, "value", userAnswers.ContainsKey(question.Id) ? userAnswers[question.Id] : "");
                builder.AddAttribute(3, "onchange", EventCallback.Factory.Create<ChangeEventArgs>(this, e => userAnswers[question.Id] = e.Value?.ToString() ?? ""));
                
                builder.OpenElement(4, "option");
                builder.AddAttribute(5, "value", "");
                builder.AddContent(6, "Select Answer");
                builder.CloseElement();
                
                foreach (var option in matchOptions)
                {
                    builder.OpenElement(7, "option");
                    builder.AddAttribute(8, "value", option);
                    builder.AddContent(9, option);
                    builder.CloseElement();
                }
                builder.CloseElement();
                break;

            case "Sentence Completion":
            case "Summary Completion":
            case "Table Completion":
            case "Flow-chart Completion":
            case "Diagram Labelling":
            case "Short Answer":
            default:
                builder.OpenElement(0, "input");
                builder.AddAttribute(1, "type", "text");
                builder.AddAttribute(2, "class", "form-control");
                builder.AddAttribute(3, "placeholder", "Type your answer here...");
                builder.AddAttribute(4, "value", userAnswers.ContainsKey(question.Id) ? userAnswers[question.Id] : "");
                builder.AddAttribute(5, "oninput", EventCallback.Factory.Create<ChangeEventArgs>(this, e => userAnswers[question.Id] = e.Value?.ToString() ?? ""));
                builder.CloseElement();
                break;
        }
    };

    private void TakeAnotherTest()
    {
        ResetTest();
    }

    private void BackToSelection()
    {
        ResetTest();
    }

    private void ResetTest()
    {
        timer?.Dispose();
        selectedTestSet = null;
        currentTestPassages.Clear();
        currentTestQuestions.Clear();
        testStarted = false;
        testCompleted = false;
        userAnswers.Clear();
        correctAnswers = 0;
        totalQuestions = 40;
        answeredQuestions = 0;
        progressPercentage = 0;
        estimatedBandScore = "";
        currentSection = 1;
        currentQuestionIndex = 0;
        reviewFilter = "all";
        questionTypeStats.Clear();
        sectionStats.Clear();
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}